from flask import Flask, Response
from flask_prometheus_metrics import register_metrics
from apscheduler.schedulers.background import BackgroundScheduler
from prometheus_client import Gauge, generate_latest, CollectorRegistry, CONTENT_TYPE_LATEST
from datetime import datetime
import time

# Initialize Flask app
app = Flask(__name__)

# Register default metrics and /metrics endpoint
register_metrics(app, app_version="v1.0.0", app_config="production")

# Custom Prometheus metrics
registry = CollectorRegistry()
my_metric = Gauge('my_metric_name', 'Description of my metric', registry=registry)
last_run_time = Gauge('scheduler_last_run_time', 'Timestamp of the last scheduler run', registry=registry)

def update_metrics():
    """Function to update Prometheus metrics."""
    # Example metric update
    my_metric.set(123)  # Replace with actual logic

    # Update last run time with the current time in UNIX timestamp format
    current_time = datetime.now().timestamp()
    last_run_time.set(current_time)

@app.route('/healthcheck')
def healthcheck():
    return "OK", 200

@app.route('/metrics')
def metrics():
    """Endpoint to expose metrics."""
    return Response(generate_latest(registry), mimetype=CONTENT_TYPE_LATEST)

def start_scheduler():
    """Function to start the scheduler."""
    scheduler = BackgroundScheduler()
    scheduler.add_job(update_metrics, 'interval', minutes=10)
    scheduler.start()

    # Keep the script running
    while True:
        time.sleep(1)

if __name__ == '__main__':
    # Start the scheduler in a separate thread
    from threading import Thread
    scheduler_thread = Thread(target=start_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()

    # Start Flask app
    app.run(host='0.0.0.0', port=5000)
_-----;;;;-;---------------

from flask import Flask, jsonify
from flask_prometheus_exporter import PrometheusExporter
from apscheduler.schedulers.background import BackgroundScheduler
import datetime

app = Flask(__name__)
exporter = PrometheusExporter(app)

last_run_time = exporter.gauge('scheduler_last_run_time', 'Timestamp of the last scheduler run', labels={'environment': 'production', 'region': 'us-west'})

def update_metrics():
    current_time = datetime.datetime.now()
    last_run_time.labels(environment='production', region='us-west').set(current_time.timestamp())

scheduler = BackgroundScheduler()
scheduler.add_job(update_metrics, 'interval', minutes=10)
scheduler.start()

@app.route('/healthcheck')
def healthcheck():
    return jsonify({'status': 'ok'})

@app.route('/metrics')
def metrics():
    return exporter.response()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
